{
  "openapi": "3.0.0",
  "info": {
    "title": "API MiaTasks",
    "description": "description",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "miatasks.herokuapp.com/",
      "description": "MAIN - production"
    },
    {
      "url": "http://localhost:3000/",
      "description": "INTERNAL - testing"
    }
  ],
  "paths": {
    "/tasks/": {
      "get": {
        "summary": "gets ALL tasks",
        "description": "returns an **array of objects** containing **ALL** tasks",
        "operationId": "getAllTasks",
        "tags": ["Tasks"],
        "responses": {
          "204": {
            "description": "no tasks in DB"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "add NEW task",
        "description": "adds **NEW** task from **body**",
        "operationId": "addTask",
        "tags": ["Tasks"],
        "requestBody": {
          "description": "new task **body**",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              },
              "example": {
                "text": "new sample task",
                "tasklist": "work",
                "star": true,
                "complete": false
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "201": {
            "description": "task created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "summary": "gets a single task BY ID",
        "description": "searches DB for corresponding **ID**, returns single **object**",
        "operationId": "getTaskById",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "ID of the task to **get**. format: 24 character hexadecimal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "200": {
            "$ref": "#/components/responses/ok"
          }
        }
      },
      "put": {
        "summary": "updates task by ID",
        "description": "searches DB for corresponding **ID**, updates **object** found from **body**",
        "operationId": "updateTask",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "ID of the task to **update**. format: 24 character hexadecimal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "updated task **body**",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              },
              "example": {
                "text": "sample task update",
                "tasklist": "household",
                "star": true,
                "complete": false
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "200": {
            "$ref": "#/components/responses/ok"
          }
        }
      },
      "delete": {
        "summary": "deletes task by ID",
        "description": "searches DB for corresponding **ID**, deletes **object** found",
        "operationId": "deleteTask",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "ID of the task to **delete**. format: 24 character hexadecimal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "204": {
            "description": "task deleted"
          }
        }
      }
    },
    "/tasks/{tasklist}": {
      "get": {
        "summary": "gets tasklist",
        "description": "searches DB for corresponding **tasklist**, returns an **array of objects** containing tasklist tasks",
        "operationId": "getTasklist",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "tasklist",
            "in": "path",
            "required": "true",
            "description": "name of the tasklist to **get**.",
            "schema": {
              "type": "string",
              "enum": ["personal", "household", "work"]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "tasklist empty"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{option}/{id}": {
      "put": {
        "summary": "toggles task option (star/complete)",
        "description": "searches DB for corresponding **ID**, toggles option (star/complete), returns updated **object**",
        "operationId": "toggleTaskOption",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "option",
            "in": "path",
            "required": "true",
            "description": "name of the option to **toggle**",
            "schema": {
              "type": "string",
              "enum": ["star", "complete"]
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "ID of the task to **toggle option**. format: 24 character hexadecimal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "200": {
            "$ref": "#/components/responses/ok"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "tasklist": {
            "type": "string"
          },
          "star": {
            "type": "boolean"
          },
          "complete": {
            "type": "boolean"
          }
        }
      }
    },
    "responses": {
      "ok": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "badRequest": {
        "description": "invalid **ID** OR invalid **object body**",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "notFound": {
        "description": "the specified resource was **NOT FOUND**"
      }
    }
  }
}
